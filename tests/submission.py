# partie 10 

#       submission.py


import pandas as pd
import joblib
from sklearn.linear_model import LogisticRegression
from google.colab import files
from IPython.core.display import display, HTML

# Affichage d'un titre stylis√©
display(HTML("""
<h1 style="color:#2c3e50; font-size: 32px; font-weight: bold; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);">
Partie 10: Cr√©ation du fichier de soumission
</h1>
"""))

# ================================
# ‚ö° CHARGEMENT DES DONN√âES
# ================================

# Charger les fichiers de test
test_df = pd.read_csv('/content/drive/My Drive/Titanic-Survival-Predict-main/test_cleaned.csv')

# V√©rifier que la colonne PassengerId existe
assert 'PassengerId' in test_df.columns, "üö® ERREUR : La colonne 'PassengerId' est absente du dataset test !"

# Extraire les caract√©ristiques
X_test = test_df.drop(columns=['PassengerId'])

# V√©rifier que X_test n'est pas vide
assert not X_test.empty, "üö® ERREUR : Le dataset X_test est vide apr√®s suppression de 'PassengerId' !"

# ================================
# ‚ö° CHARGEMENT DES MOD√àLES
# ================================

# D√©finir les chemins des mod√®les
logreg_model_path = '/content/drive/MyDrive/Titanic-Survival-Predict-main/Models/logistic_regression_model.pkl'
rf_model_path = '/content/drive/MyDrive/Titanic-Survival-Predict-main/Models/random_forest_model.pkl'
xgb_model_path = '/content/drive/MyDrive/Titanic-Survival-Predict-main/Models/xgboost_model.pkl'

# Charger les mod√®les
final_logreg = joblib.load(logreg_model_path)
final_rf = joblib.load(rf_model_path)
final_xgb = joblib.load(xgb_model_path)

# V√©rifier que les mod√®les sont bien charg√©s
assert isinstance(final_logreg, LogisticRegression), "üö® ERREUR : Le mod√®le LogisticRegression n'est pas charg√© correctement !"
assert hasattr(final_rf, "predict"), "üö® ERREUR : Le mod√®le RandomForest n'est pas charg√© correctement !"
assert hasattr(final_xgb, "predict"), "üö® ERREUR : Le mod√®le XGBoost n'est pas charg√© correctement !"

# ================================
# ‚ö° PR√âDICTION DES MOD√àLES DE BASE
# ================================

print("\n--- G√©n√©ration des pr√©dictions des mod√®les de base sur le jeu de test ---")

# Faire les pr√©dictions avec chaque mod√®le
test_pred_logreg = final_logreg.predict(X_test)
test_pred_rf = final_rf.predict(X_test)
test_pred_xgb = final_xgb.predict(X_test)

# V√©rifier que les pr√©dictions ont la bonne taille
assert len(test_pred_logreg) == len(X_test), "üö® ERREUR : Probl√®me de taille des pr√©dictions logreg !"
assert len(test_pred_rf) == len(X_test), "üö® ERREUR : Probl√®me de taille des pr√©dictions rf !"
assert len(test_pred_xgb) == len(X_test), "üö® ERREUR : Probl√®me de taille des pr√©dictions xgb !"

# Cr√©er un DataFrame avec ces pr√©dictions
test_meta_features = pd.DataFrame({
    'logreg_pred': test_pred_logreg,
    'rf_pred': test_pred_rf,
    'xgb_pred': test_pred_xgb
})

print("‚úÖ Pr√©dictions des mod√®les de base sur le jeu de test g√©n√©r√©es avec succ√®s.")

# ================================
# ‚ö° ENTRA√éNEMENT DU MOD√àLE M√âTA
# ================================

print("\n--- Entra√Ænement du mod√®le Meta (R√©gression Logistique) ---")

# G√©n√©rer les pr√©dictions sur l'entra√Ænement pour cr√©er un mod√®le m√©ta
train_pred_logreg = final_logreg.predict(X_test)
train_pred_rf = final_rf.predict(X_test)
train_pred_xgb = final_xgb.predict(X_test)

# V√©rifier que les pr√©dictions sont valides
assert len(train_pred_logreg) == len(X_test), "üö® ERREUR : Probl√®me de taille des pr√©dictions logreg sur le train !"
assert len(train_pred_rf) == len(X_test), "üö® ERREUR : Probl√®me de taille des pr√©dictions rf sur le train !"
assert len(train_pred_xgb) == len(X_test), "üö® ERREUR : Probl√®me de taille des pr√©dictions xgb sur le train !"

# Cr√©er le dataset pour le mod√®le m√©ta
train_meta_features = pd.DataFrame({
    'logreg_pred': train_pred_logreg,
    'rf_pred': train_pred_rf,
    'xgb_pred': train_pred_xgb
})

# Entra√Æner le mod√®le m√©ta (R√©gression Logistique)
meta_model = LogisticRegression(max_iter=1000, random_state=42)
meta_model.fit(train_meta_features, test_pred_logreg)

print("‚úÖ Mod√®le Meta entra√Æn√© avec succ√®s.")

# ================================
# ‚ö° PR√âDICTION FINALE
# ================================

print("\n--- Pr√©diction avec le mod√®le Meta ---")

# Faire les pr√©dictions finales
y_test_pred = meta_model.predict(test_meta_features)

# V√©rifier la taille des pr√©dictions finales
assert len(y_test_pred) == len(X_test), "üö® ERREUR : Probl√®me de taille des pr√©dictions finales du mod√®le m√©ta !"

# ================================
# ‚ö° CR√âATION DU FICHIER DE SOUMISSION
# ================================

print("\n--- Cr√©ation du fichier de soumission ---")

# Cr√©er le fichier de soumission
submission = pd.DataFrame({
    'PassengerId': test_df['PassengerId'],
    'Survived': y_test_pred
})

# Sauvegarde en CSV
submission_file = 'submission.csv'
submission.to_csv(submission_file, index=False)

# V√©rifier que le fichier est bien sauvegard√©
assert os.path.exists(submission_file), f"üö® ERREUR : Le fichier {submission_file} n'a pas √©t√© cr√©√© !"

print(f"‚úÖ Fichier de soumission '{submission_file}' cr√©√© avec succ√®s !")

# ================================
# ‚ö° T√âL√âCHARGEMENT DU FICHIER
# ================================
files.download(submission_file)
print("‚úÖ T√©l√©chargement du fichier termin√©.")
